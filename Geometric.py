import telebot
from telebot import REPLY_MARKUP_TYPES, types
import config 
import math
import re
import requests

bot = telebot.TeleBot(config.TOKEN)

def form(string):
	massiv = list(string)
	while True:
		if string == '0.0000':
			massiv = '0'
			break	
		if massiv[-1] == '0' or massiv[-1] == '.':
			massiv.pop(-1)
		else:
			break
	return ''.join(massiv)

def check(text):
	massiv = list(text)
	check_massiv = ['y', 'x', '=', '(', ')', '*','/', '-', '+', '1', '2', '3', '4', '5', '6', '7', '8', '9', '0', '^']
	for i in massiv:
		if i in check_massiv:
			ans = True
		else:
			ans = False
	return ans

def googleSearch(query):
    with requests.session() as c:
        url = 'https://www.google.com/search'
        query = {'q': query}
        urllink = requests.get(url, params=query)
    return urllink.url

def func1(string):
	if len(re.findall('y',string)) <= 1 and len(re.findall('=',string)) <= 1 and check(string) == True and len(string)>=3:	
		if len(re.findall('x',string)) > 0 or len(re.findall('y',string)) > 0:
			answer = True
		else:
			answer = False
	else:
		answer = False
	return answer



@bot.message_handler(commands = ['start'])
def start(message):

	sti = open('st/sticker.tgs','rb')
	bot.send_sticker(message.chat.id,sti)
	
	journal = open('journal.txt', 'r')
	dictionary = eval(journal.read())
	journal.close()
	dictionary['{.id}'.format(message.from_user)] = ''
	journal = open('journal.txt', 'w')
	journal.write(str(dictionary))
	journal.close()

	markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
	item1 = types.KeyboardButton('–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –µ–¥.')
	item2 = types.KeyboardButton('–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏')
	item3 = types.KeyboardButton('–®–ø–∞—Ä–≥–∞–ª–∫–∞')
	item4 = types.KeyboardButton('–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏')
	markup.add(item1, item2, item3, item4)

	bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç, {.first_name}, —è –≥–µ–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–π –±–æ—Ç, —á—Ç–æ –¥–µ–ª–∞—Ç—å?'.format(message.from_user) , reply_markup=markup)

@bot.message_handler(content_types=['text'])
def lalala(message):
	check_massiv = ['–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏', '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –µ–¥.', '–®–ø–∞—Ä–≥–∞–ª–∫–∞', '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏']
	journal = open('journal.txt', 'r')
	dictionary = eval(journal.read())
	journal.close()
	
	if dictionary['{.id}'.format(message.from_user)] == 'sin' and message.text not in check_massiv:
		try:
			text = form('{:.4f}'.format( math.sin(math.radians(float(re.sub(',','.',message.text))))))
		except ValueError:
			text = '–û—à–∏–±–∫–∞, —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ‚ö†Ô∏è‚ùóÔ∏è'
		bot.send_message(message.chat.id, text)

	if dictionary['{.id}'.format(message.from_user)] == 'cos' and message.text not in check_massiv:
		try:
			text = form('{:.4f}'.format( math.cos(math.radians(float(re.sub(',','.',message.text))))))
		except ValueError:
			text = '–û—à–∏–±–∫–∞, —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ‚ö†Ô∏è‚ùóÔ∏è'
		bot.send_message(message.chat.id, text)

	if dictionary['{.id}'.format(message.from_user)] == 'tg' and message.text not in check_massiv:
		try:
			text = form('{:.4f}'.format( math.tan(math.radians(float(re.sub(',','.',message.text))))))
		except ValueError:
			text = '–û—à–∏–±–∫–∞, —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ‚ö†Ô∏è‚ùóÔ∏è'
		bot.send_message(message.chat.id, text)

	if dictionary['{.id}'.format(message.from_user)] == 'ctg' and message.text not in check_massiv:
		try:
			text = form('{:.4f}'.format(math.cos(math.radians(float(re.sub(',','.',message.text)))) / math.sin(math.radians(float(re.sub(',','.',message.text))))))
		except ValueError:
			text = '–û—à–∏–±–∫–∞, —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ‚ö†Ô∏è‚ùóÔ∏è'
		bot.send_message(message.chat.id, text)

	if dictionary['{.id}'.format(message.from_user)] == 'dtr' and message.text not in check_massiv:
		try:
			text = form('{:.4f}'.format(math.radians(float(re.sub(',','.',message.text)))))
		except ValueError:
			text = '–û—à–∏–±–∫–∞, —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ‚ö†Ô∏è‚ùóÔ∏è'
		bot.send_message(message.chat.id, text)

	if dictionary['{.id}'.format(message.from_user)] == 'rtd' and message.text not in check_massiv:
		try:
			text = form('{:.4f}'.format(math.degrees(float(re.sub(',','.',message.text)))))
		except ValueError:
			text = '–û—à–∏–±–∫–∞, —ç—Ç–æ –Ω–µ —á–∏—Å–ª–æ‚ö†Ô∏è‚ùóÔ∏è'
		bot.send_message(message.chat.id, text)

	if dictionary['{.id}'.format(message.from_user)] == 'graph' and message.text not in check_massiv: 
		if func1(message.text) == True and len(message.text)<=32:
			text = googleSearch(re.sub(',','.',message.text))
		else:
			text = '–û—à–∏–±–∫–∞‚ö†Ô∏è‚ùóÔ∏è'
		bot.send_message(message.chat.id, text)

	if message.text == '–¢—Ä–∏–≥–æ–Ω–æ–º–µ—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏':
		markup = types.InlineKeyboardMarkup(row_width=1)
		
		item1 = types.InlineKeyboardButton('sin', callback_data='r_sin')
		item2 = types.InlineKeyboardButton('cos', callback_data='r_cos')
		item3 = types.InlineKeyboardButton('tg', callback_data='r_tg')
		item4 = types.InlineKeyboardButton('ctg', callback_data='r_ctg')
		markup.add(item1, item2, item3, item4)

		bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é', reply_markup = markup)
				
	if message.text == '–ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –µ–¥.':
		markup = types.InlineKeyboardMarkup(row_width=1)
		
		item1 = types.InlineKeyboardButton('–†–∞–¥–∏–∞–Ω—ã –≤ –≥—Ä–∞–¥—É—Å—ã', callback_data='rtd')
		item2 = types.InlineKeyboardButton('–ì—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã', callback_data='dtr')
		markup.add(item1, item2)

		bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è', reply_markup = markup)

	if message.text == '–®–ø–∞—Ä–≥–∞–ª–∫–∞':
		markup = types.InlineKeyboardMarkup(row_width=1)
		
		item1 = types.InlineKeyboardButton('–§–æ—Ä–º—É–ª—ã —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–≥–æ —É–º–Ω–æ–∂–µ–Ω–∏—è', callback_data='formula')
		item2 = types.InlineKeyboardButton('–í–∏–¥ –∫–≤. —É—Ä–∞–≤–Ω–µ–Ω–∏—è', callback_data='–∫–≤. —É—Ä–∞–≤–Ω–µ–Ω–∏–µ')
		item3 = types.InlineKeyboardButton('–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç', callback_data='–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç')
		item4 = types.InlineKeyboardButton('—Ç. –í–∏–µ—Ç–∞', callback_data='—Ç. –í–∏–µ—Ç–∞')

		markup.add(item1, item2, item3, item4)

		bot.send_message(message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ —à–ø–∞—Ä–≥–∞–ª–∫—É',reply_markup = markup)

		journal = open('journal.txt', 'r')
		dictionary = eval(journal.read())
		journal.close()
		dictionary['{.id}'.format(message.from_user)] = ''
		journal = open('journal.txt', 'w')
		journal.write(str(dictionary))
		journal.close()

	if message.text == '–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏':
		bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é (–ø—Ä–∏–º–µ—Ä: y=x^2):')
		journal = open('journal.txt', 'r')
		dictionary = eval(journal.read())
		journal.close()
		dictionary['{.id}'.format(message.from_user)] = 'graph'
		journal = open('journal.txt', 'w')
		journal.write(str(dictionary))
		journal.close()

	if dictionary['{.id}'.format(message.from_user)] == '' and message.text not in check_massiv:
		bot.send_message(message.chat.id, '–Ø –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –¥–µ–ª–∞—Ç—åü§∑‚Äç‚ôÇÔ∏è?')

@bot.callback_query_handler(func=lambda call: True)
def choose(call):
	if call.message:
		
		if call.data == 'pr_back':
			bot.edit_message_text(chat_id=call.message.chat.id, message_id= call.message.message_id, text='–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:',
			reply_markup=None)

			markup = types.InlineKeyboardMarkup(row_width=1)
		
			item1 = types.InlineKeyboardButton('–†–∞–¥–∏–∞–Ω—ã –≤ –≥—Ä–∞–¥—É—Å—ã', callback_data='rtd')
			item2 = types.InlineKeyboardButton('–ì—Ä–∞–¥—É—Å—ã –≤ —Ä–∞–¥–∏–∞–Ω—ã', callback_data='dtr')
			markup.add(item1, item2)

			bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è', reply_markup = markup)

			journal = open('journal.txt', 'r')
			dictionary = eval(journal.read())
			journal.close()
			dictionary['{.id}'.format(call.from_user)] = ''
			journal = open('journal.txt', 'w')
			journal.write(str(dictionary))
			journal.close()

		if call.data == 'trig_back':
			bot.edit_message_text(chat_id=call.message.chat.id, message_id= call.message.message_id, text='–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ(–≥—Ä–∞–¥—É—Å—ã):',
			reply_markup=None)

			markup = types.InlineKeyboardMarkup(row_width=1)
			
			item1 = types.InlineKeyboardButton('sin', callback_data='r_sin')
			item2 = types.InlineKeyboardButton('cos', callback_data='r_cos')
			item3 = types.InlineKeyboardButton('tg', callback_data='r_tg')
			item4 = types.InlineKeyboardButton('ctg', callback_data='r_ctg')
			markup.add(item1, item2, item3, item4)

			bot.send_message(call.message.chat.id, '–í—ã–±–µ—Ä–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é', reply_markup = markup)

			journal = open('journal.txt', 'r')
			dictionary = eval(journal.read())
			journal.close()
			dictionary['{.id}'.format(call.from_user)] = ''
			journal = open('journal.txt', 'w')
			journal.write(str(dictionary))
			journal.close()

		if call.data == 'r_sin':
			markup = types.InlineKeyboardMarkup(row_width=1)
			item1 = types.InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data='trig_back')
			markup.add(item1)

			bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ(–≥—Ä–∞–¥—É—Å—ã):',reply_markup = markup)
			
			journal = open('journal.txt', 'r')
			dictionary = eval(journal.read())
			journal.close()
			dictionary['{.id}'.format(call.from_user)] = 'sin'
			journal = open('journal.txt', 'w')
			journal.write(str(dictionary))
			journal.close()

			bot.edit_message_text(chat_id=call.message.chat.id, message_id= call.message.message_id, text='–í—ã–±–µ—Ä–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é',
			reply_markup=None)
		
		if call.data == 'r_cos':
			markup = types.InlineKeyboardMarkup(row_width=1)
			item1 = types.InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data='trig_back')
			markup.add(item1)

			bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ(–≥—Ä–∞–¥—É—Å—ã):',reply_markup = markup)
			
			journal = open('journal.txt', 'r')
			dictionary = eval(journal.read())
			journal.close()
			dictionary['{.id}'.format(call.from_user)] = 'cos'
			journal = open('journal.txt', 'w')
			journal.write(str(dictionary))
			journal.close()

			bot.edit_message_text(chat_id=call.message.chat.id, message_id= call.message.message_id, text='–í—ã–±–µ—Ä–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é',
			reply_markup=None)

		if call.data == 'r_tg':
			markup = types.InlineKeyboardMarkup(row_width=1)
			item1 = types.InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data='trig_back')
			markup.add(item1)

			bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ(–≥—Ä–∞–¥—É—Å—ã):',reply_markup = markup)

			journal = open('journal.txt', 'r')
			dictionary = eval(journal.read())
			journal.close()
			dictionary['{.id}'.format(call.from_user)] = 'tg'
			journal = open('journal.txt', 'w')
			journal.write(str(dictionary))
			journal.close()

			bot.edit_message_text(chat_id=call.message.chat.id, message_id= call.message.message_id, text='–í—ã–±–µ—Ä–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é',
			reply_markup=None)

		if call.data == 'r_ctg':
			markup = types.InlineKeyboardMarkup(row_width=1)
			item1 = types.InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data='trig_back')
			markup.add(item1)

			bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ(–≥—Ä–∞–¥—É—Å—ã):',reply_markup = markup)

			journal = open('journal.txt', 'r')
			dictionary = eval(journal.read())
			journal.close()
			dictionary['{.id}'.format(call.from_user)] = 'ctg'
			journal = open('journal.txt', 'w')
			journal.write(str(dictionary))
			journal.close()

			bot.edit_message_text(chat_id=call.message.chat.id, message_id= call.message.message_id, text='–í—ã–±–µ—Ä–µ—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é',
			reply_markup=None)

		if call.data == 'rtd':
			markup = types.InlineKeyboardMarkup(row_width=1)
			item1 = types.InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data='pr_back')
			markup.add(item1)

			bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:',reply_markup = markup)

			journal = open('journal.txt', 'r')
			dictionary = eval(journal.read())
			journal.close()
			dictionary['{.id}'.format(call.from_user)] = 'rtd'
			journal = open('journal.txt', 'w')
			journal.write(str(dictionary))
			journal.close()

			bot.edit_message_text(chat_id=call.message.chat.id, message_id= call.message.message_id, text='–í—ã–±–µ—Ä–µ—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è',
			reply_markup=None)

		if call.data == 'dtr':
			markup = types.InlineKeyboardMarkup(row_width=1)
			item1 = types.InlineKeyboardButton('–Ω–∞–∑–∞–¥', callback_data='pr_back')
			markup.add(item1)

			bot.send_message(call.message.chat.id, '–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:',reply_markup = markup)

			journal = open('journal.txt', 'r')
			dictionary = eval(journal.read())
			journal.close()
			dictionary['{.id}'.format(call.from_user)] = 'dtr'
			journal = open('journal.txt', 'w')
			journal.write(str(dictionary))
			journal.close()

			bot.edit_message_text(chat_id=call.message.chat.id, message_id= call.message.message_id, text='–í—ã–±–µ—Ä–µ—Ç–µ –µ–¥–∏–Ω–∏—Ü—ã –∏–∑–º–µ—Ä–µ–Ω–∏—è',
			reply_markup=None)
		
		if call.data == 'formula':
			bot.send_photo(call.message.chat.id, open('photo/formula.png','rb'))
			
			bot.edit_message_text(chat_id=call.message.chat.id, message_id = call.message.message_id, text='–í—ã–±–µ—Ä–∏ —à–ø–∞—Ä–≥–∞–ª–∫—É',
			reply_markup=None)

		if call.data == '–∫–≤. —É—Ä–∞–≤–Ω–µ–Ω–∏–µ':
			bot.send_photo(call.message.chat.id, open('photo/–∫–≤. —É—Ä–∞–≤–Ω–µ–Ω–∏–µ.png','rb'))

			bot.edit_message_text(chat_id=call.message.chat.id, message_id= call.message.message_id, text='–í—ã–±–µ—Ä–∏ —à–ø–∞—Ä–≥–∞–ª–∫—É',
			reply_markup=None)

		if call.data == '–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç':
			bot.send_photo(call.message.chat.id, open('photo/–î–∏—Å–∫—Ä–∏–º–∏–Ω–∞–Ω—Ç.png','rb'))

			bot.edit_message_text(chat_id=call.message.chat.id, message_id= call.message.message_id, text='–í—ã–±–µ—Ä–∏ —à–ø–∞—Ä–≥–∞–ª–∫—É',
			reply_markup=None)

		if call.data == '—Ç. –í–∏–µ—Ç–∞':
			bot.send_photo(call.message.chat.id, open('photo/—Ç. –í–∏–µ—Ç–∞.png','rb'))

			bot.edit_message_text(chat_id=call.message.chat.id, message_id= call.message.message_id, text='–í—ã–±–µ—Ä–∏ —à–ø–∞—Ä–≥–∞–ª–∫—É',
			reply_markup=None)

bot.polling (none_stop=True)

